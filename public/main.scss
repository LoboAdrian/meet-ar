video {
    transform: rotateY(180deg); 
}

.select {
    height: 30px;
}

.h-90 {
    height: 90% !important;
}

.h-10 {
    height: 10% !important;
}

#peerVideo:hover {
    opacity: 0.6;
    cursor: pointer;
}

.centered {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}

body {
    color: #fff;
    background: hsl(227, 10%, 10%);
    font: 300 1em 'Fira Sans', sans-serif;
    
    /* Center everything ever */
    justify-content: center;
    align-content: center;
    align-items: center;
    text-align: center;
    min-height: 100vh;
    display: flex;
}
  
  button {
    background: none;
    border: 2px solid;
    font: inherit;
    line-height: 1;
    margin: 0.5em;
    padding: 1em 2em;
}
  
  h1 { font-weight: 400; }
  
  code { 
    color: #e4cb58;
    font: inherit;
}


/********************** Custom Buttons - Don't touch ***************************/

/* Size can also be negative; see how it's smaller than the element */
.raise:hover,
.raise:focus {
  box-shadow: 0 0.5em 0.5em -0.4em var(--hover);
  transform: translateY(-0.25em);
}

.raise:hover {background-color: #ffa260}

.exit:hover {background-color: #FC4262;}

$colors: (
  raise: #ffa260, 
);

/* Sass variables compile to a static string; CSS variables are dynamic and inherited */
  /* Loop through the map and set CSS custom properties using Sass variables */
@each $button, $color in $colors {
  .#{$button} {
    --color: #{$color};
    --hover: #{adjust-hue($color, 45deg)};
  }
}

/* Now every button will have different colors as set above. We get to use the same structure, only changing the custom properties. */
button {  
  color: var(--color);
  transition: 0.25s;
  
  &:hover,
  &:focus { 
    border-color: var(--hover);
    color: #fff;
  }
}